{"version":3,"sources":["Components/Title.js","Components/AddItem.js","Components/Item.js","Components/ItemList.js","Containers/JS/App.js","serviceWorker.js","index.js"],"names":["Title","className","AddItem","submitItem","event","preventDefault","item","refs","input","value","trim","props","updateTodo","onSubmit","this","type","placeholder","ref","Component","Item","printListItem","index","taskStyle","color","completed","cursor","textDecoration","state","editing","saveEdit","bind","defaultValue","task","style","onClick","toggleComplete","removeOrCancelButton","setState","removeItem","editOrSaveButton","changeEditValue","newEditState","editItem","editedtext","todo","ind","focus","ItemList","todos","map","key","printItems","App","foundTodo","push","splice","text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e03ebe58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <h1 className='tc'>To Do List</h1>\r\n    );\r\n}\r\n\r\nexport default Title;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass AddItem extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitItem}>\r\n                <div className='cf'>\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l input-reset bn fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns'\r\n                            type='text'\r\n                            placeholder='What do you need to do?'\r\n                            ref=\"input\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l button-reset fl pv3 tc bn bg-green hover-bg-green white pointer w-100 w-25-m w-20-l br2-ns br--right-ns'\r\n                            type='submit'\r\n                            value='Add'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        );\r\n    }\r\n\r\n    submitItem = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing whenever submit is clicked\r\n\r\n        const item = this.refs.input.value.trim(); // Get whatever the user typed\r\n\r\n        if (item === '') {\r\n            // If there's nothing don't let an item be added\r\n            this.refs.input.value = '';\r\n            return;\r\n        } else {\r\n            this.refs.input.value = ''; // Reset text field value\r\n\r\n            return this.props.updateTodo(item); // Call updateTodo\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AddItem;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editing: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { todo, ind } = this.props;\r\n\r\n        // If editing,\r\n        return (\r\n            // Render with edit button\r\n            <div className={\"mw6 center pa2 mt3 br2-ns ba b--black-10 overflow-auto \" + (todo.completed ? 'bg-light-green' : 'bg-light-blue')} >\r\n                <div className='dib fl'>\r\n                    {this.printListItem(todo, ind)}\r\n                </div>\r\n\r\n                <div className='fr pr2'>\r\n                    {this.editOrSaveButton(ind)}\r\n                    {this.removeOrCancelButton(ind)}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.editing) {\r\n            this.refs.editedtext.focus();\r\n        }\r\n    }\r\n\r\n    // Prints the list items in the todo list\r\n    printListItem = (item, index) => {\r\n        // If the task is completed, make it green, else red\r\n        // Also pointers\r\n        // Also strikethrough for completed items\r\n        const taskStyle = {\r\n            color: item.completed ? '#137752' : 'black',\r\n            cursor: 'pointer',\r\n            textDecoration: item.completed ? 'line-through' : 'none'\r\n        }\r\n\r\n\r\n        // Return the item as a label\r\n        // Why a label? idk man\r\n        return this.state.editing ?\r\n            <form onSubmit={this.saveEdit.bind(this, index)}>\r\n                <input type='text' ref='editedtext' defaultValue={item.task} />\r\n            </form>\r\n            :\r\n            <label style={taskStyle} onClick={this.props.toggleComplete.bind(this, index)}>\r\n                {item.task}\r\n            </label>\r\n    }\r\n\r\n    // The removal button\r\n    removeOrCancelButton = (index) => {\r\n        return this.state.editing ?\r\n            <button type=\"button\" onClick={() => this.setState({ editing: false })}>Cancel</button>\r\n            :\r\n            <button type=\"button\" onClick={this.props.removeItem.bind(this, index)}>X</button>\r\n\r\n    }\r\n\r\n    // The edit/save button\r\n    editOrSaveButton = (index) => {\r\n        // If editing,\r\n        return this.state.editing ?\r\n\r\n            // Render save button\r\n            <div className='pr2 dib'>\r\n                <button type=\"button\" onClick={this.saveEdit.bind(this, index)}>Save</button>\r\n            </div>\r\n            :\r\n            // Otherwise render edit button\r\n            <div className='pr2 dib'>\r\n                <button type=\"button\" onClick={this.changeEditValue}>Edit</button>\r\n            </div>\r\n\r\n\r\n    }\r\n\r\n    // Edit button was clicked\r\n    changeEditValue = () => {\r\n        const newEditState = !this.state.editing; // Cause react gets upset when I try to skip this step\r\n        this.setState({ editing: newEditState });\r\n    }\r\n\r\n    // Save edited item\r\n    // Index needs to come first otherwise react gets upset\r\n    saveEdit = (index, event) => {\r\n        event.preventDefault();\r\n        this.props.editItem(index, this.refs.editedtext.value); // Call editItem in App\r\n        this.changeEditValue(); // Undo editing value\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport Item from './Item'\r\n\r\nclass ItemList extends Component {\r\n    printItems() {\r\n        const { todos } = this.props;\r\n\r\n        // Create a new Item for each todo in the list\r\n        return todos.map((todo, index) =>\r\n            <Item\r\n                key={index}\r\n                ind={index}\r\n                todo={todo}\r\n                toggleComplete={this.props.toggleComplete}\r\n                removeItem={this.props.removeItem}\r\n                editItem={this.props.editItem}\r\n            />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <div className='cf'>\r\n                    {this.printItems()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ItemList;\r\n","import React, { Component } from 'react';\nimport '../CSS/App.css';\nimport Title from '../../Components/Title';\nimport AddItem from '../../Components/AddItem';\nimport ItemList from '../../Components/ItemList'\n\nconst todos = [\n  {\n    task: 'Make a todo list',\n    completed: false\n  },\n  {\n    task: 'Make todo list work',\n    completed: false\n  }\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todos\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Title />\n\n        <div className='bg-light-gray mw7 center pa4 mt5 br2-ns ba b--black-10'>\n          <AddItem\n            updateTodo={this.updateTodo}\n          />\n\n          <hr className='mt4 mb3'/>\n\n          <ItemList\n            todos={this.state.todos}\n            toggleComplete={this.toggleComplete}\n            removeItem={this.removeItem}\n            editItem={this.editItem}\n          />\n        </div>\n      </div>\n\n    );\n  }\n\n  // Make it green\n  toggleComplete = (index) => {\n    const foundTodo = this.state.todos[index]; // Find item\n\n    // Update\n    foundTodo.completed = !foundTodo.completed;\n    this.setState({ todos });\n  }\n\n  updateTodo = (task) => {\n    todos.push({\n      task: task,\n      completed: false\n    });\n\n    this.setState({ todos });\n  }\n\n  removeItem = (index) => {\n    todos.splice(index, 1);\n    this.setState({ todos });\n  }\n\n  editItem = (index, text) => {\n    const foundTodo = this.state.todos[index];\n\n    foundTodo.task = text;\n    foundTodo.completed = false;\n\n    this.setState({ todos });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/JS/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}