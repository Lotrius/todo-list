{"version":3,"sources":["Components/Title.js","Components/AddItem.js","Components/Item.js","Components/ItemList.js","Containers/JS/App.js","serviceWorker.js","index.js"],"names":["Title","className","AddItem","submitItem","event","preventDefault","console","log","refs","input","value","props","updateTodo","onSubmit","this","type","placeholder","ref","Component","Item","todo","ind","printListItem","item","index","taskStyle","color","completed","cursor","style","onClick","toggleComplete","bind","task","ItemList","todos","map","key","printItems","App","foundTodo","state","setState","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAQeA,G,MAND,WACV,OACI,wBAAIC,UAAU,MAAd,gBCiCOC,E,2MATXC,WAAa,SAACC,GAGV,OAFAA,EAAMC,iBACNC,QAAQC,IAAI,EAAKC,KAAKC,MAAMC,OACrB,EAAKC,MAAMC,WAAW,EAAKJ,KAAKC,MAAMC,Q,wEA3B7C,OACI,0BAAMT,UAAU,yDAAyDY,SAAUC,KAAKX,YACpF,yBAAKF,UAAU,MACX,6BACI,2BACIA,UAAU,kGACVc,KAAK,OACLC,YAAY,0BACZC,IAAI,WAGZ,6BACI,2BACIhB,UAAU,kHACVc,KAAK,SACLL,MAAM,e,GAjBZQ,aCuBPC,E,iLAtBD,IAAD,EACiBL,KAAKH,MAAnBS,EADH,EACGA,KAAMC,EADT,EACSA,IACd,OACI,yBAAKpB,UAAU,0DACVa,KAAKQ,cAAcF,EAAMC,M,oCAMxBE,EAAMC,GAChB,IAAMC,EAAY,CACdC,MAAOH,EAAKI,UAAY,UAAY,UACpCC,OAAQ,WAGZ,OAAO,2BAAOC,MAAOJ,EAAWK,QAAShB,KAAKH,MAAMoB,eAAeC,KAAKlB,KAAMU,IAASD,EAAKU,U,GAjBjFf,aCmBJgB,E,qLAjBG,IAAD,OAET,OAAOpB,KAAKH,MAAMwB,MAAMC,IAAI,SAAChB,EAAMI,GAAP,OAAiB,kBAAC,EAAD,CAAMa,IAAKb,EAAOH,IAAKG,EAAOJ,KAAMA,EAAMW,eAAgB,EAAKpB,MAAMoB,qB,+BAIlH,OACI,0BAAM9B,UAAU,sDACZ,yBAAKA,UAAU,MACVa,KAAKwB,mB,GAVHpB,aCGjBiB,EAAQ,CACZ,CACEF,KAAM,mBACNN,WAAW,GAEb,CACEM,KAAM,sBACNN,WAAW,IAmDAY,E,YA9Cb,aAAe,IAAD,8BACZ,+CAwBFR,eAAiB,SAACP,GAChB,IAAMgB,EAAY,EAAKC,MAAMN,MAAMX,GAGnCgB,EAAUb,WAAaa,EAAUb,UACjC,EAAKe,SAAS,CAAEP,WA9BJ,EAiCdvB,WAAa,SAACqB,GACZE,EAAMQ,KAAK,CACTV,KAAMA,EACNN,WAAW,IAGbrB,QAAQC,IAAI4B,GAEZ,EAAKO,SAAS,CAAEP,WAvChB,EAAKM,MAAQ,CACXN,MAAOA,GAHG,E,sEAQZ,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEvB,WAAYE,KAAKF,aAGnB,kBAAC,EAAD,CACEuB,MAAOrB,KAAK2B,MAAMN,MAClBJ,eAAgBjB,KAAKiB,sB,GAnBbb,aCLE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.6289aa97.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <h1 className='tc'>To Do List</h1>\r\n    );\r\n}\r\n\r\nexport default Title;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass AddItem extends Component {\r\n    render() {\r\n        return (\r\n            <form className='bg-light-gray mw7 center pa4 mt5 br2-ns ba b--black-10' onSubmit={this.submitItem}>\r\n                <div className='cf'>\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l input-reset bn fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns'\r\n                            type='text'\r\n                            placeholder='What do you need to do?'\r\n                            ref=\"input\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className='f6 f5-l button-reset fl pv3 tc bn bg-green hover-bg-green white pointer w-100 w-25-m w-20-l br2-ns br--right-ns'\r\n                            type='submit'\r\n                            value='Add'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        );\r\n    }\r\n\r\n    submitItem = (event) => {\r\n        event.preventDefault(); // Prevent page from refreshing whenever submit is clicked\r\n        console.log(this.refs.input.value);\r\n        return this.props.updateTodo(this.refs.input.value);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AddItem;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Item extends Component {\r\n    render() {\r\n        const { todo, ind } = this.props;\r\n        return (\r\n            <div className=\"bg-light-blue mw5 center pa4 mt5 br2-ns ba b--black-10\" >\r\n                {this.printListItem(todo, ind)}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    printListItem(item, index) {\r\n        const taskStyle = {\r\n            color: item.completed ? '#5cb85c' : '#d9534f',\r\n            cursor: 'pointer'\r\n        }\r\n\r\n        return <label style={taskStyle} onClick={this.props.toggleComplete.bind(this, index)}>{item.task}</label>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport Item from './Item'\r\n\r\nclass ItemList extends Component {\r\n    printItems() {\r\n        // Create a new Item for each todo in the list\r\n        return this.props.todos.map((todo, index) => <Item key={index} ind={index} todo={todo} toggleComplete={this.props.toggleComplete} />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className='bg-light-gray mw7 center pa4 br2-ns ba b--black-10' >\r\n                <div className='cf'>\r\n                    {this.printItems()}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ItemList;\r\n","import React, { Component } from 'react';\nimport '../CSS/App.css';\nimport Title from '../../Components/Title';\nimport AddItem from '../../Components/AddItem';\nimport ItemList from '../../Components/ItemList'\n\nconst todos = [\n  {\n    task: 'Make a todo list',\n    completed: false\n  },\n  {\n    task: 'Make todo list work',\n    completed: false\n  }\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todos\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Title />\n\n        <AddItem\n          updateTodo={this.updateTodo}\n        />\n\n        <ItemList\n          todos={this.state.todos}\n          toggleComplete={this.toggleComplete}\n        />\n      </div>\n    );\n  }\n\n  // Make it green\n  toggleComplete = (index) => {\n    const foundTodo = this.state.todos[index]; // Find item\n\n    // Update\n    foundTodo.completed = !foundTodo.completed;\n    this.setState({ todos });\n  }\n\n  updateTodo = (task) => {\n    todos.push({\n      task: task,\n      completed: false\n    });\n\n    console.log(todos);\n\n    this.setState({ todos });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/JS/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}